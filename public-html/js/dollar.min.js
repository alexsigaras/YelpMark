function Point(n,t){this.X=n,this.Y=t}function Rectangle(n,t,e,i){this.X=n,this.Y=t,this.Width=e,this.Height=i}function Unistroke(n,t){this.Name=n,this.Points=Resample(t,NumPoints);var e=IndicativeAngle(this.Points);this.Points=RotateBy(this.Points,-e),this.Points=ScaleTo(this.Points,SquareSize),this.Points=TranslateTo(this.Points,Origin),this.Vector=Vectorize(this.Points)}function Result(n,t){this.Name=n,this.Score=t}function DollarRecognizer(){this.Unistrokes=new Array(NumUnistrokes),this.Unistrokes[0]=new Unistroke("s",new Array(new Point(-120,-3),new Point(-125,9),new Point(-126,20),new Point(-126,31),new Point(-126,43),new Point(-125,53),new Point(-121,64),new Point(-118,74),new Point(-114,85),new Point(-109,95),new Point(-104,104),new Point(-98,113),new Point(-90,114),new Point(-81,113),new Point(-72,113),new Point(-63,110),new Point(-54,108),new Point(-45,105),new Point(-36,102),new Point(-27,97),new Point(-19,92),new Point(-11,86),new Point(-4,79),new Point(3,73),new Point(10,65),new Point(14,56),new Point(15,45),new Point(13,34),new Point(11,23),new Point(8,12),new Point(6,1),new Point(4,-9),new Point(2,-20),new Point(0,-31),new Point(-4,-41),new Point(-5,-52),new Point(-5,-64),new Point(-5,-73),new Point(-2,-84),new Point(3,-93),new Point(9,-101),new Point(13,-111),new Point(20,-119),new Point(27,-126),new Point(35,-132),new Point(43,-135),new Point(51,-130),new Point(58,-122),new Point(64,-114),new Point(69,-104),new Point(75,-95),new Point(80,-86),new Point(86,-77),new Point(91,-67),new Point(96,-58),new Point(102,-49),new Point(106,-39),new Point(109,-28),new Point(113,-18),new Point(116,-7),new Point(119,2),new Point(122,12),new Point(123,22),new Point(116,29))),this.Unistrokes[1]=new Unistroke("u",new Array(new Point(-132,1),new Point(-125,7),new Point(-117,16),new Point(-115,26),new Point(-108,35),new Point(-102,43),new Point(-96,52),new Point(-91,62),new Point(-84,70),new Point(-77,78),new Point(-70,87),new Point(-64,96),new Point(-57,104),new Point(-49,112),new Point(-40,118),new Point(-31,119),new Point(-20,118),new Point(-11,113),new Point(-2,106),new Point(4,99),new Point(12,91),new Point(20,83),new Point(27,75),new Point(35,68),new Point(43,60),new Point(48,50),new Point(49,39),new Point(49,28),new Point(50,17),new Point(51,6),new Point(51,-4),new Point(49,-14),new Point(45,-24),new Point(38,-32),new Point(32,-42),new Point(25,-50),new Point(18,-58),new Point(11,-66),new Point(5,-76),new Point(0,-85),new Point(-3,-95),new Point(-8,-105),new Point(-13,-115),new Point(-19,-124),new Point(-26,-130),new Point(-18,-122),new Point(-13,-113),new Point(-9,-103),new Point(-3,-94),new Point(2,-85),new Point(8,-75),new Point(15,-67),new Point(22,-59),new Point(30,-51),new Point(37,-43),new Point(44,-35),new Point(52,-27),new Point(60,-20),new Point(70,-16),new Point(80,-13),new Point(90,-10),new Point(101,-8),new Point(109,-6),new Point(117,-9))),this.Unistrokes[2]=new Unistroke("h",new Array(new Point(-136,-2),new Point(-128,6),new Point(-120,8),new Point(-112,9),new Point(-103,11),new Point(-95,15),new Point(-87,18),new Point(-79,23),new Point(-71,27),new Point(-63,31),new Point(-55,35),new Point(-47,38),new Point(-39,44),new Point(-31,51),new Point(-23,57),new Point(-16,63),new Point(-8,70),new Point(0,76),new Point(7,82),new Point(15,89),new Point(22,95),new Point(30,102),new Point(38,111),new Point(45,120),new Point(53,127),new Point(61,133),new Point(53,127),new Point(45,121),new Point(38,114),new Point(31,102),new Point(25,89),new Point(18,79),new Point(11,69),new Point(4,59),new Point(-1,45),new Point(-8,33),new Point(-15,23),new Point(-21,11),new Point(-27,-3),new Point(-31,-17),new Point(-35,-33),new Point(-37,-53),new Point(-36,-71),new Point(-34,-90),new Point(-27,-101),new Point(-19,-106),new Point(-11,-110),new Point(-3,-108),new Point(4,-111),new Point(12,-115),new Point(21,-116),new Point(29,-115),new Point(37,-113),new Point(45,-111),new Point(53,-108),new Point(62,-105),new Point(70,-102),new Point(78,-99),new Point(86,-96),new Point(94,-92),new Point(102,-89),new Point(110,-85),new Point(113,-83),new Point(105,-89))),this.Unistrokes[3]=new Unistroke("i",new Array(new Point(-121,-9),new Point(-121,-99),new Point(-119,-148),new Point(-115,-152),new Point(-111,-156),new Point(-107,-159),new Point(-103,-150),new Point(-99,-137),new Point(-95,-125),new Point(-91,-112),new Point(-87,-98),new Point(-83,-81),new Point(-79,-63),new Point(-75,-45),new Point(-71,-28),new Point(-67,-10),new Point(-63,7),new Point(-59,13),new Point(-55,9),new Point(-51,5),new Point(-47,1),new Point(-42,-2),new Point(-38,-2),new Point(-34,4),new Point(-30,11),new Point(-26,18),new Point(-22,25),new Point(-18,32),new Point(-14,40),new Point(-10,48),new Point(-6,56),new Point(-2,64),new Point(1,73),new Point(5,81),new Point(9,90),new Point(13,89),new Point(18,85),new Point(22,81),new Point(26,77),new Point(30,73),new Point(34,69),new Point(38,65),new Point(42,61),new Point(46,57),new Point(50,53),new Point(54,49),new Point(58,45),new Point(62,41),new Point(66,38),new Point(71,34),new Point(75,30),new Point(79,26),new Point(83,22),new Point(87,18),new Point(91,14),new Point(95,10),new Point(99,6),new Point(103,2),new Point(107,-1),new Point(111,-5),new Point(115,-9),new Point(119,-12),new Point(124,-16),new Point(128,-20))),this.Recognize=function(n,t){n=Resample(n,NumPoints);var e=IndicativeAngle(n);n=RotateBy(n,-e),n=ScaleTo(n,SquareSize),n=TranslateTo(n,Origin);for(var i=Vectorize(n),o=+(1/0),P=-1,w=0;w<this.Unistrokes.length;w++){var r;r=t?OptimalCosineDistance(this.Unistrokes[w].Vector,i):DistanceAtBestAngle(n,this.Unistrokes[w],-AngleRange,+AngleRange,AnglePrecision),r<o&&(o=r,P=w)}return P==-1?new Result("No match.",0):new Result(this.Unistrokes[P].Name,t?1/o:1-o/HalfDiagonal)},this.AddGesture=function(n,t){this.Unistrokes[this.Unistrokes.length]=new Unistroke(n,t);for(var e=0,i=0;i<this.Unistrokes.length;i++)this.Unistrokes[i].Name==n&&e++;return e},this.DeleteUserGestures=function(){return this.Unistrokes.length=NumUnistrokes,NumUnistrokes}}function Resample(n,t){for(var e=PathLength(n)/(t-1),i=0,o=new Array(n[0]),P=1;P<n.length;P++){var w=Distance(n[P-1],n[P]);if(i+w>=e){var r=n[P-1].X+(e-i)/w*(n[P].X-n[P-1].X),s=n[P-1].Y+(e-i)/w*(n[P].Y-n[P-1].Y),a=new Point(r,s);o[o.length]=a,n.splice(P,0,a),i=0}else i+=w}return o.length==t-1&&(o[o.length]=new Point(n[n.length-1].X,n[n.length-1].Y)),o}function IndicativeAngle(n){var t=Centroid(n);return Math.atan2(t.Y-n[0].Y,t.X-n[0].X)}function RotateBy(n,t){for(var e=Centroid(n),i=Math.cos(t),o=Math.sin(t),P=new Array,w=0;w<n.length;w++){var r=(n[w].X-e.X)*i-(n[w].Y-e.Y)*o+e.X,s=(n[w].X-e.X)*o+(n[w].Y-e.Y)*i+e.Y;P[P.length]=new Point(r,s)}return P}function ScaleTo(n,t){for(var e=BoundingBox(n),i=new Array,o=0;o<n.length;o++){var P=n[o].X*(t/e.Width),w=n[o].Y*(t/e.Height);i[i.length]=new Point(P,w)}return i}function TranslateTo(n,t){for(var e=Centroid(n),i=new Array,o=0;o<n.length;o++){var P=n[o].X+t.X-e.X,w=n[o].Y+t.Y-e.Y;i[i.length]=new Point(P,w)}return i}function Vectorize(n){for(var t=0,e=new Array,i=0;i<n.length;i++)e[e.length]=n[i].X,e[e.length]=n[i].Y,t+=n[i].X*n[i].X+n[i].Y*n[i].Y;for(var o=Math.sqrt(t),i=0;i<e.length;i++)e[i]/=o;return e}function OptimalCosineDistance(n,t){for(var e=0,i=0,o=0;o<n.length;o+=2)e+=n[o]*t[o]+n[o+1]*t[o+1],i+=n[o]*t[o+1]-n[o+1]*t[o];var P=Math.atan(i/e);return Math.acos(e*Math.cos(P)+i*Math.sin(P))}function DistanceAtBestAngle(n,t,e,i,o){for(var P=Phi*e+(1-Phi)*i,w=DistanceAtAngle(n,t,P),r=(1-Phi)*e+Phi*i,s=DistanceAtAngle(n,t,r);Math.abs(i-e)>o;)w<s?(i=r,r=P,s=w,P=Phi*e+(1-Phi)*i,w=DistanceAtAngle(n,t,P)):(e=P,P=r,w=s,r=(1-Phi)*e+Phi*i,s=DistanceAtAngle(n,t,r));return Math.min(w,s)}function DistanceAtAngle(n,t,e){var i=RotateBy(n,e);return PathDistance(i,t.Points)}function Centroid(n){for(var t=0,e=0,i=0;i<n.length;i++)t+=n[i].X,e+=n[i].Y;return t/=n.length,e/=n.length,new Point(t,e)}function BoundingBox(n){for(var t=+(1/0),e=-(1/0),i=+(1/0),o=-(1/0),P=0;P<n.length;P++)t=Math.min(t,n[P].X),i=Math.min(i,n[P].Y),e=Math.max(e,n[P].X),o=Math.max(o,n[P].Y);return new Rectangle(t,i,e-t,o-i)}function PathDistance(n,t){for(var e=0,i=0;i<n.length;i++)e+=Distance(n[i],t[i]);return e/n.length}function PathLength(n){for(var t=0,e=1;e<n.length;e++)t+=Distance(n[e-1],n[e]);return t}function Distance(n,t){var e=t.X-n.X,i=t.Y-n.Y;return Math.sqrt(e*e+i*i)}function Deg2Rad(n){return n*Math.PI/180}var NumUnistrokes=4,NumPoints=64,SquareSize=250,Origin=new Point(0,0),Diagonal=Math.sqrt(SquareSize*SquareSize+SquareSize*SquareSize),HalfDiagonal=.5*Diagonal,AngleRange=Deg2Rad(45),AnglePrecision=Deg2Rad(2),Phi=.5*(-1+Math.sqrt(5));